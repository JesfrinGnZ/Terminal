/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.Frame;

import backend.analizadoresTerminal.AnalizadorLexicoTerminal;
import backend.analizadoresTerminal.parser;
import backend.manejoDeDatos.Documento;
import backend.manejoDeDatos.ManejadorDeArboles;
import java.io.BufferedReader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author jesfrin
 */
public class TerminalGui extends javax.swing.JFrame {

    private ManejadorDeArboles nuevoManejador;

    private Documento documentoActual;

    private String direccionActual = "/";

    private static final int CARACTERES_FIJOS = 12;
    private int caracteresDeDireccion = 0;

    private int filaDeCursor;
    private int filaDeInstruccion = 1;

    private int columnaActual;

    /**
     * Creates new form TerminalGui
     */
    public TerminalGui() {
        initComponents();
        this.setLocationRelativeTo(null);//Configurando su posicion en el centro
        //crearCarpeta();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        consolaTextArea = new javax.swing.JTextArea();
        documentosPanel = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        consolaTextArea.setBackground(new java.awt.Color(0, 0, 0));
        consolaTextArea.setColumns(20);
        consolaTextArea.setFont(new java.awt.Font("DejaVu Sans", 0, 15)); // NOI18N
        consolaTextArea.setForeground(new java.awt.Color(0, 153, 0));
        consolaTextArea.setRows(5);
        consolaTextArea.setText("comandos:/%");
        consolaTextArea.setCaretColor(java.awt.Color.red);
        consolaTextArea.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        consolaTextArea.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                consolaTextAreaCaretUpdate(evt);
            }
        });
        consolaTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                consolaTextAreaKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                consolaTextAreaKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                consolaTextAreaKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(consolaTextArea);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 0, 630, 342));

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("/");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        documentosPanel.setViewportView(jTree1);

        getContentPane().add(documentosPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 184, 342));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void consolaTextAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_consolaTextAreaKeyPressed
        int columnaLimite = CARACTERES_FIJOS + caracteresDeDireccion;
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_BACK_SPACE) {
            if (filaDeCursor == filaDeInstruccion) {
                if (columnaActual <= columnaLimite) {
                    evt.consume();
                }
            } else {
                evt.consume();
            }

        } else if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            String instruccion = obtenerInstruccion();
            if (filaDeCursor != filaDeInstruccion || this.consolaTextArea.getText().endsWith("%")) {
                evt.consume();
            } else {
                try {
                    if (instruccion.equals("clear")) {
                        this.consolaTextArea.setText("");
                    } else {
                        AnalizadorLexicoTerminal lexico = new AnalizadorLexicoTerminal(new BufferedReader(new StringReader(instruccion)));
                        parser sintactico = new parser(lexico, nuevoManejador);
                        sintactico.parse();
                    }
                } catch (Exception ex) {
                    Logger.getLogger(TerminalGui.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    this.filaDeInstruccion++;
                    //Agregueme esto y luego tome el enter
                    this.consolaTextArea.append("\ncomandos:" + direccionActual + "%");
                    evt.consume();
                }
            }

        }


    }//GEN-LAST:event_consolaTextAreaKeyPressed

    private void consolaTextAreaCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_consolaTextAreaCaretUpdate
        int pos = evt.getDot(); //mira los pasos del puntero
        try {
            int fila = consolaTextArea.getLineOfOffset(pos) + 1; //devuelve la fila
            int columna = pos - consolaTextArea.getLineStartOffset(fila - 1) + 1; //devuelve la columna
            this.filaDeCursor = fila;
            this.columnaActual = columna;
        } catch (BadLocationException exc) {
        }
    }//GEN-LAST:event_consolaTextAreaCaretUpdate

    private void consolaTextAreaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_consolaTextAreaKeyReleased

    }//GEN-LAST:event_consolaTextAreaKeyReleased

    private void consolaTextAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_consolaTextAreaKeyTyped
        if (filaDeCursor != filaDeInstruccion || evt.getKeyChar() == '%') {
            evt.consume();
        }
    }//GEN-LAST:event_consolaTextAreaKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TerminalGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TerminalGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TerminalGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TerminalGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TerminalGui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea consolaTextArea;
    private javax.swing.JScrollPane documentosPanel;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables

//    public void setNuevoManejador(ManejadorDeArboles nuevoManejador) {
//        this.nuevoManejador = nuevoManejador;
//    }
    //Opciones para el jtree
    public DefaultMutableTreeNode llamarRaizDeArbol() {
        DefaultTreeModel model = (DefaultTreeModel) jTree1.getModel();
        return (DefaultMutableTreeNode) model.getRoot();
    }

    public void actualizarArbol() {
        DefaultTreeModel model = (DefaultTreeModel) jTree1.getModel();
        model.reload();
    }

    //OPcion para obtener comando ingresado por el usuario
    public String obtenerInstruccion() {
        String texto = this.consolaTextArea.getText();
        String[] instrucciones = texto.split("%");
        return instrucciones[instrucciones.length - 1];
    }

    //Instrucciones para pwd
    public void anadirTextoATerminal(String texto) {
        this.consolaTextArea.append("\n" + texto);
        this.filaDeInstruccion++;
    }

    //Instrucciones para cd
    public void cambiarDireccionEnTerminal(Documento documentoActual) {
        this.documentoActual = documentoActual;
        this.direccionActual = documentoActual.getDireccion();
        this.caracteresDeDireccion = documentoActual.getDireccion().length() - 1;
    }

    public void informarQueNoSeHEncontradoElDirectorio() {
        this.consolaTextArea.append("\nNo se ha encontrado el archivo o directorio");
        this.filaDeInstruccion++;
    }

    //Instrucciones para ls
    public void mostrarNombresDeDocumentosContenidosEnDirectoirio(ArrayList<String> nodos) {
        int n = 0;
        this.filaDeInstruccion++;
        this.consolaTextArea.append("\n");
        for (String nodo : nodos) {
            n++;
            this.consolaTextArea.append(nodo + "\t");
            if (n % 4 == 0) {
                this.filaDeInstruccion++;
                this.consolaTextArea.append("\n");
            }
        }
    }

    public void mostrarInfoDeDocumentosContenidosEnDirectorio(Documento documento) {
        this.consolaTextArea.append("\n" + documento.getPermisos() + "  " + documento.getTamano() + "  " + documento.getFechaDeCreacion().getMonth() + " " + documento.getFechaDeCreacion().getDayOfMonth() + "  " + documento.getHoraDeCreacion()+" "+documento.getNombre());
        filaDeInstruccion++;
    }

    //Instrucciones para mkdir
    public void informarQueLaCarpetaYaExiste(String directorio) {
        this.consolaTextArea.append("\nmkdir:No se puede crear el directorio <"+directorio+"> ya existe");
        filaDeInstruccion++;
    }

    //Instrucciones para mv
    
    //Instrucciones para indicar un error
    public void informarDeUnError(String cadena) {
        this.consolaTextArea.append("\nExistio un error sintactico en la instruccion:" + cadena);
        this.filaDeInstruccion++;
    }

    public void salirDelPrograma(){
        System.exit(0);
    }
    
    public String getDireccionActual() {
        return direccionActual;
    }

    public void setDireccionActual(String direccionActual) {
        this.direccionActual = direccionActual;
    }

    public void setNuevoManejador(ManejadorDeArboles nuevoManejador) {
        this.nuevoManejador = nuevoManejador;
    }

    public Documento getDocumentoActual() {
        return documentoActual;
    }

    public void setDocumentoActual(Documento documentoActual) {
        this.documentoActual = documentoActual;
    }

}

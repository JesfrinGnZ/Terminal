
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package backend.analizadoresTerminal;

import java_cup.runtime.*;
import java.util.ArrayList;
import javax.swing.tree.DefaultMutableTreeNode;
import backend.manejoDeDatos.*;
import backend.instruccionesParaComando.*;
import backend.archivos.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\002\004\000\002\002\003\000\002\002" +
    "\005\000\002\002\003\000\002\003\003\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\003\000" +
    "\002\003\003\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\003\005\000\002\003\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\062\000\022\004\014\005\006\006\015\007\005\010" +
    "\010\011\007\015\012\024\004\001\002\000\004\002\000" +
    "\001\002\000\010\016\054\017\055\021\053\001\002\000" +
    "\006\002\ufff9\020\ufff9\001\002\000\004\021\050\001\002" +
    "\000\010\016\036\017\037\021\035\001\002\000\006\002" +
    "\ufffe\020\033\001\002\000\004\027\031\001\002\000\004" +
    "\002\030\001\002\000\014\002\ufffd\016\026\017\027\020" +
    "\ufffd\021\025\001\002\000\024\002\ufff8\016\017\017\020" +
    "\020\ufff8\021\016\022\024\023\023\025\021\026\022\001" +
    "\002\000\006\002\ufff1\020\ufff1\001\002\000\006\002\ufff3" +
    "\020\ufff3\001\002\000\006\002\ufff2\020\ufff2\001\002\000" +
    "\006\002\ufff5\020\ufff5\001\002\000\006\002\ufff4\020\ufff4" +
    "\001\002\000\006\002\ufff6\020\ufff6\001\002\000\006\002" +
    "\ufff7\020\ufff7\001\002\000\006\002\ufffa\020\ufffa\001\002" +
    "\000\006\002\ufffc\020\ufffc\001\002\000\006\002\ufffb\020" +
    "\ufffb\001\002\000\004\002\001\001\002\000\004\021\032" +
    "\001\002\000\006\002\uffd9\020\uffd9\001\002\000\022\004" +
    "\014\005\006\006\015\007\005\010\010\011\007\015\012" +
    "\024\004\001\002\000\004\002\uffff\001\002\000\014\002" +
    "\uffe5\016\043\017\044\020\uffe5\021\042\001\002\000\014" +
    "\002\uffe3\016\043\017\044\020\uffe3\021\042\001\002\000" +
    "\014\002\uffe4\016\043\017\044\020\uffe4\021\042\001\002" +
    "\000\006\002\uffe2\020\uffe2\001\002\000\006\002\uffe0\020" +
    "\uffe0\001\002\000\014\002\uffdd\016\043\017\044\020\uffdd" +
    "\021\042\001\002\000\014\002\uffdb\016\043\017\044\020" +
    "\uffdb\021\042\001\002\000\014\002\uffdc\016\043\017\044" +
    "\020\uffdc\021\042\001\002\000\006\002\uffde\020\uffde\001" +
    "\002\000\006\002\uffdf\020\uffdf\001\002\000\006\002\uffe1" +
    "\020\uffe1\001\002\000\004\021\051\001\002\000\006\002" +
    "\uffda\020\uffda\001\002\000\006\002\uffed\020\uffed\001\002" +
    "\000\014\002\ufff0\016\061\017\062\020\ufff0\021\060\001" +
    "\002\000\014\002\uffee\016\061\017\062\020\uffee\021\060" +
    "\001\002\000\014\002\uffef\016\061\017\062\020\uffef\021" +
    "\060\001\002\000\006\002\uffe9\020\uffe9\001\002\000\006" +
    "\002\uffeb\020\uffeb\001\002\000\014\002\uffe8\016\061\017" +
    "\062\020\uffe8\021\060\001\002\000\014\002\uffe6\016\061" +
    "\017\062\020\uffe6\021\060\001\002\000\014\002\uffe7\016" +
    "\061\017\062\020\uffe7\021\060\001\002\000\006\002\uffea" +
    "\020\uffea\001\002\000\006\002\uffec\020\uffec\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\062\000\006\002\012\003\010\001\001\000\002\001" +
    "\001\000\004\004\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\033\003\010\001\001\000\002\001" +
    "\001\000\006\006\044\007\046\001\001\000\006\006\044" +
    "\007\045\001\001\000\006\006\044\007\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\044\007\046" +
    "\001\001\000\006\006\044\007\045\001\001\000\006\006" +
    "\044\007\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\055\005\063\001\001\000\006" +
    "\004\055\005\062\001\001\000\006\004\055\005\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\055" +
    "\005\063\001\001\000\006\004\055\005\062\001\001\000" +
    "\006\004\055\005\056\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private Documento documento;
    private ManejadorDeArboles manejador;
    private ArrayList<DefaultMutableTreeNode> listaDeNodos = new ArrayList<>();
    //-------------------->MANEJADORES<--------------------------------------
    private ManejadorDeDirecciones manejadorDirecciones;
    private ManejadorCD manejadorCd;
    private ManejadorPWD manejadorPwd;
    private ManejadorLS manejadorLs;
    private ManejadorTouch manejadorTouch;
    private ManejadorMKDIR manejadorMkdir;
    private ManejadorDeMv manejadorDeMv;
    private ManejadorDeCHMOD manejadorChmod;
	// Connect this parser to a scanner!
	public parser(AnalizadorLexicoTerminal lex,ManejadorDeArboles manejador) {
		super(lex);
                this.manejador=manejador;
                manejadorCd = new ManejadorCD(this.manejador);
                manejadorPwd = new ManejadorPWD(this.manejador);
                manejadorLs = new ManejadorLS(this.manejador);
                manejadorTouch = new ManejadorTouch(this.manejador);
                manejadorMkdir = new ManejadorMKDIR(this.manejador);
                manejadorDirecciones = new ManejadorDeDirecciones(this.manejador);
                manejadorDeMv = new ManejadorDeMv(this.manejador);
                manejadorChmod = new ManejadorDeCHMOD(this.manejador);
                
	}

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        manejador.getMiTerminal().informarDeUnError(lexema);
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {       
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
 
/*        
String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
*/     
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= expresiones EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // expresiones ::= EXIT 
            {
              Object RESULT =null;
		EscritorDeArchivo.escribirEnArchivo("/home/jesfrin/Documentos/Textos/Folders",manejador);manejador.getMiTerminal().salirDelPrograma();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expresiones ::= expresion CONCATENACION expresiones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expresiones ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expresion ::= CD 
            {
              Object RESULT =null;
		manejadorCd.buscarDireccion(null,true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expresion ::= CD FORMATO_DIRECCION_ABSOLUTA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		manejadorCd.buscarDireccion(manejadorDirecciones.manejarDireccionAbsoluta(a),true);System.out.printf("Direccion Absoluta:%s\n",a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expresion ::= CD FORMATO_DIRECCION__RELATIVA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		manejadorCd.buscarDireccion(manejadorDirecciones.manejarDireccionRelativa(b),true);System.out.printf("Direccion Relativa:%s\n",b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expresion ::= CD IDENTIFICADOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		manejadorCd.buscarDireccion(manejadorDirecciones.manejarDireccionId(c),true);System.out.printf("Direccion Relativa:%s\n",c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expresion ::= PWD 
            {
              Object RESULT =null;
		manejadorPwd.escribirDireccion();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expresion ::= LS 
            {
              Object RESULT =null;
		manejadorLs.buscarHijosDeNodoSinDireccionEspecifica(manejador.getMiTerminal().getDireccionActual());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expresion ::= LS MOSTRAR_ARCHIVOS_L 
            {
              Object RESULT =null;
		manejadorLs.buscarY_MostrarInformacionDeHijosSinDireccionEspecifica(manejador.getMiTerminal().getDireccionActual());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expresion ::= LS MOSTRAR_ARCHIVOS_A 
            {
              Object RESULT =null;
		manejadorLs.buscarHijosSinDireccionEspecificaOcultos(manejador.getMiTerminal().getDireccionActual());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresion ::= LS MOSTRAR_ARCHIVOS_LA 
            {
              Object RESULT =null;
		manejadorLs.buscarY_MostrarInfoDeHijos(manejador.getMiTerminal().getDireccionActual());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresion ::= LS MOSTRAR_ARCHIVOS_AL 
            {
              Object RESULT =null;
		manejadorLs.buscarY_MostrarInfoDeHijos(manejador.getMiTerminal().getDireccionActual());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresion ::= LS FORMATO_DIRECCION_ABSOLUTA 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		manejadorLs.buscarHijosConDireccion(manejadorDirecciones.manejarDireccionAbsoluta(d),manejadorCd,"ls");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresion ::= LS FORMATO_DIRECCION__RELATIVA 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		manejadorLs.buscarHijosConDireccion(manejadorDirecciones.manejarDireccionRelativa(f),manejadorCd,"ls");;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresion ::= LS IDENTIFICADOR 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		manejadorLs.buscarHijosConDireccion(manejadorDirecciones.manejarDireccionId(g),manejadorCd,"ls");;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresion ::= TOUCH IDENTIFICADOR 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		manejadorTouch.crearArchivosSoloConId(h,manejador.getMiTerminal().getDireccionActual());System.out.printf("Nombre de archivo:%s",h);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresion ::= TOUCH FORMATO_DIRECCION__RELATIVA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		manejadorTouch.crearArchivosConDireccion(manejadorDirecciones.manejarDireccionRelativa(b),manejadorCd);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion ::= TOUCH FORMATO_DIRECCION_ABSOLUTA 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		manejadorTouch.crearArchivosConDireccion(manejadorDirecciones.manejarDireccionAbsoluta(d),manejadorCd);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion ::= TOUCH nombresDeArchivos 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // nombresDeArchivos ::= IDENTIFICADOR otrosNombresDeArchivos 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		manejadorTouch.crearArchivosSoloConId(k,manejador.getMiTerminal().getDireccionActual());System.out.printf("Nombre de archivo:%s",k);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombresDeArchivos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // nombresDeArchivos ::= FORMATO_DIRECCION__RELATIVA otrosNombresDeArchivos 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		manejadorTouch.crearArchivosConDireccion(manejadorDirecciones.manejarDireccionRelativa(b),manejadorCd);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombresDeArchivos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // nombresDeArchivos ::= FORMATO_DIRECCION_ABSOLUTA otrosNombresDeArchivos 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		manejadorTouch.crearArchivosConDireccion(manejadorDirecciones.manejarDireccionAbsoluta(d),manejadorCd);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombresDeArchivos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // otrosNombresDeArchivos ::= nombresDeArchivos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("otrosNombresDeArchivos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // otrosNombresDeArchivos ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		manejadorTouch.crearArchivosSoloConId(j,manejador.getMiTerminal().getDireccionActual());System.out.printf("Nombre de archivo:%s",j);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("otrosNombresDeArchivos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // otrosNombresDeArchivos ::= FORMATO_DIRECCION__RELATIVA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		manejadorTouch.crearArchivosConDireccion(manejadorDirecciones.manejarDireccionRelativa(b),manejadorCd);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("otrosNombresDeArchivos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // otrosNombresDeArchivos ::= FORMATO_DIRECCION_ABSOLUTA 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		manejadorTouch.crearArchivosConDireccion(manejadorDirecciones.manejarDireccionAbsoluta(d),manejadorCd);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("otrosNombresDeArchivos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion ::= MKDIR IDENTIFICADOR 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		manejadorMkdir.crearDirectorioSoloConId(h,manejador.getMiTerminal().getDireccionActual());System.out.printf("Nombre de archivo:%s",h);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion ::= MKDIR FORMATO_DIRECCION__RELATIVA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		manejadorMkdir.crearCarpetasConDireccion(manejadorDirecciones.manejarDireccionRelativa(b),manejadorCd);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion ::= MKDIR FORMATO_DIRECCION_ABSOLUTA 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		manejadorMkdir.crearCarpetasConDireccion(manejadorDirecciones.manejarDireccionAbsoluta(d),manejadorCd);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion ::= MKDIR nombresDeCarpetas 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // nombresDeCarpetas ::= IDENTIFICADOR otrosNombresDeCarpetas 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		manejadorMkdir.crearDirectorioSoloConId(h,manejador.getMiTerminal().getDireccionActual());System.out.printf("Nombre de archivo:%s",h);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombresDeCarpetas",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // nombresDeCarpetas ::= FORMATO_DIRECCION__RELATIVA otrosNombresDeCarpetas 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		manejadorMkdir.crearCarpetasConDireccion(manejadorDirecciones.manejarDireccionRelativa(b),manejadorCd);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombresDeCarpetas",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // nombresDeCarpetas ::= FORMATO_DIRECCION_ABSOLUTA otrosNombresDeCarpetas 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		manejadorMkdir.crearCarpetasConDireccion(manejadorDirecciones.manejarDireccionAbsoluta(d),manejadorCd);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombresDeCarpetas",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // otrosNombresDeCarpetas ::= nombresDeCarpetas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("otrosNombresDeCarpetas",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // otrosNombresDeCarpetas ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		manejadorMkdir.crearDirectorioSoloConId(b,manejador.getMiTerminal().getDireccionActual());System.out.printf("Nombre de archivo:%s",b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("otrosNombresDeCarpetas",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // otrosNombresDeCarpetas ::= FORMATO_DIRECCION__RELATIVA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		manejadorMkdir.crearCarpetasConDireccion(manejadorDirecciones.manejarDireccionRelativa(c),manejadorCd);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("otrosNombresDeCarpetas",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // otrosNombresDeCarpetas ::= FORMATO_DIRECCION_ABSOLUTA 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		manejadorMkdir.crearCarpetasConDireccion(manejadorDirecciones.manejarDireccionAbsoluta(d),manejadorCd);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("otrosNombresDeCarpetas",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= MV IDENTIFICADOR IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		manejadorDeMv.cambiarDeNombre(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= CHMOD ESTRUCTURA_PERMISOS IDENTIFICADOR 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		manejadorChmod.cambiarPermisosDeArchivo(manejadorDirecciones.manejarDireccionId(b),manejadorCd,h);System.out.printf("Detecto permiso :):%s",h);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
